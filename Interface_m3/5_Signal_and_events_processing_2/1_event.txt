В прошлом занятии мы рассмотрели обработку сигналов, которые позволяют обмениваться сообщениями между компонентами.
Обработка внешних событий например, нажатий клавиш, осуществляется несколько иначе. Чтобы обработать событие, необходимо
наследовать класс и переопределить в нем метод со специальным названием,  так, чтобы обработать нажатие клавиши,
следует переопределить метод keyPressEvent(). Специальные методы принимают объект, содержащий детальную информацию о событии,
например, код нажатой клавиши. Все эти объекты являются наследниками класса QEvent и наследуют следующие методы:

accept() — устанавливает флаг, разрешающий дальнейшую обработку события. Скажем, если в методе closeEvent()
вызвать метод accept() через объект события, окно будет закрыто. Этот флаг обычно установлен по умолчанию

ignore() — сбрасывает флаг, разрешающий дальнейшую обработку события. Так, если в методе closeEvent() вызвать метод
ignore() через объект события, окно закрыто не будет

setAccepted(<Флаг>) — если в качестве параметра указано значение True, флаг, разрешающий дальнейшую обработку события,
будет установлен (аналогично вызову метода accept()), а если False — сброшен (аналогично вызову метода ignore())

isAccepted() — возвращает текущее состояние флага, разрешающего дальнейшую обработку события

spontaneous() — возвращает True, если событие сгенерировано системой, и False если внутри программы

type() — возвращает тип события. Рассмотрим основные типы событий:

• 0 — нет события;
• 1 — Timer — событие таймера;
• 2 — MouseButtonPress — нажата кнопка мыши;
• 3 — MouseButtonRelease — отпущена кнопка мыши;
• 4 — MouseButtonDblClick — двойной щелчок мышью;
• 5 — MouseMove — перемещение мыши;
• 6 — KeyPress — клавиша на клавиатуре нажата;
• 7 — KeyRelease — клавиша на клавиатуре отпущена;
• 8 — FocusIn — получен фокус ввода с клавиатуры;
• 9 — FocusOut — потерян фокус ввода с клавиатуры;
• 10 — Enter — указатель мыши входит в область компонента;
• 11 — Leave — указатель мыши покидает область компонента;
• 12 — Paint — перерисовка компонента;
• 13 — Move — позиция компонента изменилась;
• 14 — Resize — изменился размер компонента;
• 17 — Show — компонент отображен;
• 18 — Hide — компонент скрыт;
• 19 — Close — окно закрыто;
• 24 — WindowActivate — окно стало активным;
• 25 — WindowDeactivate — окно стало неактивным;
• 26 — ShowToParent — дочерний компонент отображен;
• 27 — HideToParent — дочерний компонент скрыт;
• 31 — Wheel — прокручено колесико мыши;
• 40 — Clipboard — содержимое буфера обмена изменено;
• 60 — DragEnter — указатель мыши входит в область компонента при операции перетаскивания;
• 61 — DragMove — производится операция перетаскивания;
• 62 — DragLeave — указатель мыши покидает область компонента при операции перетаскивания;
• 63 — Drop — операция перетаскивания завершена;
• 68 — ChildAdded — добавлен дочерний компонент;
• 69 — ChildPolished — производится настройка дочернего компонента;
• 71 — ChildRemoved — удален дочерний компонент;
• 74 — PolishRequest — компонент настроен;
• 75 — Polish — производится настройка компонента;
• 82 — ContextMenu — событие контекстного меню;
• 99 — ActivationChange — изменился статус активности окна верхнего уровня;
• 103 — WindowBlocked — окно блокировано модальным окном;
• 104 — WindowUnblocked — текущее окно разблокировано после закрытия модального окна;
• 105 — WindowStateChange — статус окна изменился;
• 121 — ApplicationActivate — приложение стало доступно пользователю;
• 122 — ApplicationDeactivate — приложение стало недоступно пользователю;
• 1000 — User — пользовательское событие;
• 65535 — MaxUser — максимальный идентификатор пользовательского события.


Статический метод registerEventType([<Число>]) позволяет зарегистрировать пользовательский тип события,
возвращая идентификатор зарегистрированного события. В качестве параметра можно указать значение в пределах от
QEvent.User (1000) до QEvent.MaxUser (65535).


Перехват всех событий осуществляется с помощью метода с предопределенным названием
event(self, <event>). Через параметр <event> доступен объект с дополнительной информацией о событии.
Этот объект различен для разных типов событий  например, для события MouseButtonPress объект будет экземпляром класса
QMouseEvent, а для события KeyPress — экземпляром класса QKeyEvent.

Из метода event() следует вернуть в качестве результата значение True, если событие было обработано, и False —
в противном случае. Если возвращается значение True, то родительский компонент не получит событие.
Чтобы продолжить распространение события, необходимо вызвать метод event() базового класса и передать ему текущий объект события.
Обычно это делается так:
return QtWidgets.QWidget.event(self, e)

В этом случае пользовательский класс является наследником класса QWidget и переопределяет метод event().
Если вы наследуете другой класс, следует вызывать метод именно этого класса. Например,
при наследовании класса QLabel инструкция будет выглядеть так:
return QtWidgets.QLabel.event(self, e)

