Разберем весь код данной программы. В первой строке импортируется модуль QtWidgets — он содержит классы,
реализующие компоненты графического интерфейса: окна, надписи, кнопки, текстовые поляи др.
Во второй строке импортируется модуль sys, из которого нам потребуется список параметров,
переданных в командной строке (argv), а также функция exit(), позволяющаязавершить выполнение программы.

Выражение:
app = QtWidgets.QApplication(sys.argv)
создает объект приложения в виде экземпляра класса QApplication. Конструктор этого
класса принимает список параметров, переданных в командной строке. Следует помнить,
что в программе всегда должен быть объект приложения, причем обязательно только один.
Может показаться, что после создания объекта он в программе больше нигде не использу-
ется, однако надо понимать, что с его помощью осуществляется управление приложением
незаметно для нас. Получить доступ к этому объекту из любого места в программе можно
через атрибут qApp из модуля QtWidgets. Например, вывести список параметров, передан-
ных в командной строке, можно так:
print(QtWidgets.qApp.argv())

Следующее выражение:
window = QtWidgets.QWidget()
создает объект окна в виде экземпляра класса QWidget. Этот класс наследуют практически
все классы, реализующие компоненты графического интерфейса. И любой компонент, не
имеющий родителя, обладает своим собственным окном.

Выражение:
window.setWindowTitle("Программа на PyQt")
задает текст, который будет выводиться в заголовке окна, для чего используется метод
setWindowTitle().
Очередное выражение:
window.resize(300, 70)
задает минимальные размеры окна. В первом параметре метода resize() указывается ши-
рина окна, а во втором параметре — его высота. При этом надо учитывать, что метод
resize() устанавливает размеры не самого окна, а его клиентской области, при этом разме-
ры заголовка и ширина границ окна не учитываются. Также следует помнить, что эти раз-
меры являются рекомендацией, — т. е., если компоненты не помещаются в окне, оно будет
увеличено.

Выражение:
label = QtWidgets.QLabel("<center>Привет, мир!</center>")
создает объект надписи. Текст надписи задается в качестве параметра в конструкторе класса
QLabel. Обратите внимание, что внутри строки мы указали HTML-теги,  а именно с помощью тега <center>
произвели выравнивание текста по центру компонента.
Возможность использования HTML-тегов и CSS-атрибутов является отличительной чертой библиотеки
PyQt — например, внутри надписи можно вывести таблицу или отобразить изображение.

Следующее выражение:
btnQuit = QtWidgets.QPushButton("&Закрыть окно")
создает объект кнопки. Текст, который будет отображен на кнопке,
задается в качестве параметра в конструкторе класса QPushButton.
Обратите внимание на символ & перед буквой З — таким образом задаются клавиши быстрого доступа.
Если нажать одновременно клавишу <Alt> и клавишу с буквой, перед которой в строке указан символ &, то кнопка сработает.

Выражение:
vbox = QtWidgets.QVBoxLayout()
создает вертикальный контейнер. Все компоненты, добавляемые в этот контейнер, будут
располагаться по вертикали сверху вниз в порядке добавления, при этом размеры добавленных компонентов будут
подогнаны под размеры контейнера. При изменении размеров контейнера будет произведено изменение размеров всех компонентов.

В следующих двух выражениях:
vbox.addWidget(label)
vbox.addWidget(btnQuit)
с помощью метода addWidget() производится добавление созданных ранее объектов надписи и кнопки в вертикальный контейнер.
Так как объект надписи добавляется первым, он будет расположен над кнопкой.
При добавлении компонентов в контейнер они автоматически становятся потомками контейнера.

Новое выражение:
window.setLayout(vbox)
добавляет контейнер в основное окно с помощью метода setLayout(). Таким образом, контейнер становится потомком основного окна.

Выражение:
btnQuit.clicked.connect(app.quit)
назначает обработчик сигнала clicked() кнопки, который генерируется при ее нажатии.
Этот сигнал доступен через одноименный атрибут класса кнопки и поддерживает метод
connect(), который и назначает для него обработчик, передаваемый первым параметром.
Обработчик представляет собой метод quit() объекта приложения, выполняющий немедленное завершение его работы.
Такой метод принято называть слотом.

Сигналом в PyQt называется особое уведомление, генерируемое при наступлении какого-либо события в приложении:
нажатия кнопки, ввода символа в текстовое поле, закрытия окна и пр.

Очередное выражение:
window.show()
выводит на экран окно и все компоненты, которые мы ранее в него добавили.

И, наконец, последнее выражение:
sys.exit(app.exec_())
запускает бесконечный цикл обработки событий в приложении.
Код, расположенный после вызова метода exec_(), будет выполнен только после завершения работы приложения,
— поскольку результат выполнения метода exec_() мы передаем
функции exit(), дальнейшее выполнение программы будет прекращено, а код возврата
передан операционной системе.
