Класс QLineEdit поддерживает следующие методы

setText(<Текст>) — помещает указанный текст в поле. Метод является слотом;

insert(<Текст>) — вставляет текст в текущую позицию текстового курсора. Если в поле был выделен фрагмент, он будет удален;

text() — возвращает текст, содержащийся в текстовом поле;

displayText() — возвращает текст, который видит пользователь. Результат зависит от режима отображения,
заданного с помощью метода setEchoMode(), — например, в режиме Password строка будет состоять из звездочек;

clear() — удаляет весь текст из поля. Метод является слотом;

backspace() — удаляет выделенный фрагмент. Если выделенного фрагмента нет, удаляет символ, стоящий слева от текстового курсора;

del() — удаляет выделенный фрагмент. Если выделенного фрагмента нет, удаляет символ, стоящий справа от текстового курсора;

setSelection(<Индекс>, <Длина>) — выделяет фрагмент длиной <Длина>, начиная с позиции <Индекс>. Во втором параметре можно указать отрицательное значение;

selectedText() — возвращает выделенный фрагмент или пустую строку, если ничего не выделено;

selectAll() — выделяет весь текст в поле. Метод является слотом;

selectionStart() — возвращает начальный индекс выделенного фрагмента или значение -1, если ничего не выделено;

hasSelectedText() — возвращает значение True, если поле содержит выделенный фрагмент, и False — в противном случае;

deselect() — снимает выделение;

isModified() — возвращает True, если текст в поле был изменен пользователем, и False — в противном случае.
Отметьте, что вызов метода setText() помечает поле как неизмененное;

setModified(<Флаг>) — если передано значение True, поле ввода помечается как измененное, если False — как неизмененное;

setEchoMode(<Режим>) — задает режим отображения текста. Могут быть указаны следующие атрибуты класса QLineEdit:
• Normal — 0 — показывать символы как они были введены;
• NoEcho — 1 — не показывать вводимые символы;
• Password — 2 — вместо символов выводить звездочки (*);
• PasswordEchoOnEdit — 3 — показывать символы при вводе, а после потери фокуса вместо них отображать звездочки (*);

setCompleter(<QCompleter>) — позволяет предлагать возможные варианты значений, начинающиеся с введенных пользователем символов.
В качестве параметра указывается экземпляр класса QCompleter:
lineEdit = QtWidgets.QLineEdit()
arr = ["кадр", "каменный", "камень", "камера"]
completer = QtWidgets.QCompleter(arr, parent=window)
lineEdit.setCompleter(completer)

setReadOnly(<Флаг>) — если в качестве параметра указано значение True, поле будет доступно только для чтения;

isReadOnly() — возвращает значение True, если поле доступно только для чтения, и False — в противном случае;

setAlignment(<Выравнивание>) — задает выравнивание текста внутри поля;

setMaxLength(<Количество>) — задает максимальное количество символов;

setFrame(<Флаг>) — если в качестве параметра указано значение False, поле будет отображаться без рамки;

setDragEnabled(<Флаг>) — если в качестве параметра указано значение True,
режим перетаскивания текста из текстового поля с помощью мыши будет включен.
По умолчанию однострочное текстовое поле только принимает перетаскиваемый текст;

setPlaceholderText(<Текст>) — задает текст подсказки, который будет выводиться в поле,
когда оно не содержит значения и не имеет фокуса ввода;

setTextMargins() — задает величины отступов от границ компонента до находящегося в нем текста. Форматы метода:
setTextMargins(<Слева>, <Сверху>, <Справа>, <Снизу>)
setTextMargins(<QMargins>)

setCursorPosition(<Индекс>) — задает положение текстового курсора;

cursorPosition() — возвращает текущее положение текстового курсора;

cursorForward(<Флаг>[, steps=1]) — перемещает текстовый курсор вперед на указанное во втором параметре количество символов.
Если в первом параметре указано значение True, выполняется выделение фрагмента;

cursorBackward(<Флаг>[, steps=1]) — перемещает текстовый курсор назад на указанное во втором параметре количество символов.
Если в первом параметре указано значение True, выполняется выделение фрагмента;

cursorWordForward(<Флаг>) — перемещает текстовый курсор вперед на одно слово.
Если в параметре указано значение True, выполняется выделение фрагмента;

cursorWordBackward(<Флаг>) — перемещает текстовый курсор назад на одно слово.
Если в параметре указано значение True, выполняется выделение фрагмента;

home(<Флаг>) — перемещает текстовый курсор в начало поля.
Если в параметре указано значение True, выполняется выделение фрагмента;

end(<Флаг>) — перемещает текстовый курсор в конец поля.
Если в параметре указано значение True, выполняется выделение фрагмента;

cut() — копирует выделенный текст в буфер обмена и удаляет его из поля при условии,
что есть выделенный фрагмент и используется режим Normal. Метод является слотом;

copy() — копирует выделенный текст в буфер обмена при условии, что есть выделенный фрагмент и используется режим Normal.
Метод является слотом;

paste() — вставляет текст из буфера обмена в текущую позицию текстового курсора при условии,
что поле доступно для редактирования. Метод является слотом;

undo() — отменяет последнюю операцию ввода пользователем при условии, что отмена возможна. Метод является слотом;

redo() — повторяет последнюю отмененную операцию ввода пользователем, если это возможно. Метод является слотом;

isUndoAvailable() — возвращает значение True, если можно отменить последнюю операцию ввода, и False — в противном случае;

isRedoAvailable() — возвращает значение True, если можно повторить последнюю отмененную операцию ввода, и False — в противном случае;

createStandardContextMenu() — создает стандартное меню, которое отображается при щелчке правой кнопкой мыши в текстовом поле.
Чтобы изменить стандартное меню, следует создать класс, наследующий класс QLineEdit,
и переопределить в нем метод contextMenuEvent(self, <event>).
Внутри этого метода можно создать свое собственное меню или добавить новый пункт в стандартное меню;

setClearButtonEnabled(<Флаг>) — если передано True, в левой части непустого поля будет выводиться кнопка,
нажатием которой можно очистить это поле, если False, кнопка очистки выводиться не будет.


Класс QLineEdit поддерживает следующие сигналы:
cursorPositionChanged(<Старая позиция>, <Новая позиция>) — генерируется при перемещении текстового курсора.
Внутри обработчика через первый параметр доступна старая позиция курсора, а через второй параметр — новая позиция.
Оба параметра являются целочисленными;

editingFinished — генерируется при нажатии клавиши <Enter> или потере полем фокуса ввода;

returnPressed — генерируется при нажатии клавиши <Enter>;

selectionChanged — генерируется при изменении выделения;

textChanged(<Новый текст>) — генерируется при изменении текста внутри поля пользователем или программно.
Внутри обработчика через параметр доступен новый текст в виде строки;

textEdited(<Новый текст>) — генерируется при изменении текста внутри поля пользователем.
При задании текста вызовом метода setText() не генерируется.
Внутри обработчика через параметр доступен новый текст в виде строки.
