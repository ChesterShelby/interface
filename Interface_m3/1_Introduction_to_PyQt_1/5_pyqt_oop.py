"""
Библиотека PyQt написана в объектно-ориентированном стиле (ООП-стиле) и содержит несколько сотен классов.
Давайте переделаем нашу первую программу под ООП стиль.
"""

import sys
from PyQt5 import QtCore, QtWidgets


class MyWindow(QtWidgets.QWidget):
    def __init__(self, parent=None):
        QtWidgets.QWidget.__init__(self, parent)
        self.label = QtWidgets.QLabel("Привет, мир!")
        self.label.setAlignment(QtCore.Qt.AlignHCenter)
        self.btnQuit = QtWidgets.QPushButton("&Закрыть окно")
        self.vbox = QtWidgets.QVBoxLayout()
        self.vbox.addWidget(self.label)
        self.vbox.addWidget(self.btnQuit)
        self.setLayout(self.vbox)
        self.btnQuit.clicked.connect(QtWidgets.qApp.quit)


if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    window = MyWindow()
    window.setWindowTitle("ООП-стиль окна")
    window.resize(300, 70)
    window.show()
    sys.exit(app.exec_())

"""
На этот раз, помимо уже знакомого модуля QtWidgets, нам понадобится модуль QtCore, в котором объявлены атрибуты, 
задающие, в том числе, и режим выравнивания текста в объекте надписи.

Далее мы определяем класс MyWindow, который наследует класс QWidget:
class MyWindow(QtWidgets.QWidget)
Можно наследовать и другие классы, являющиеся наследниками QWidget, — например,
QFrame (окно с рамкой) или QDialog (диалоговое окно). При наследовании класса QDialog
окно будет выравниваться по центру экрана (или по центру родительского окна) и иметь
в заголовке окна только две кнопки: Справка и Закрыть. Кроме того, можно наследовать
класс QMainWindow, который представляет главное окно приложения с меню, панелями инструментов и строкой состояния. 

Выражение:
def __init__(self, parent=None)
определяет конструктор класса. В качестве параметров он принимает ссылки на экземпляр
класса (self) и на родительский компонент (parent). Родительский компонент может отсутствовать, 
поэтому в определении конструктора параметру присваивается значение по умолчанию (None). 
Внутри метода __init__() вызывается конструктор базового класса, и ему
передается ссылка на родительский компонент:
QtWidgets.QWidget.__init__(self, parent)

Следующие выражения внутри конструктора создают объекты надписи, кнопки и контейнера, 
затем добавляют компоненты в контейнер, а сам контейнер — в основное окно. Следует обратить внимание на то, 
что объекты надписи и кнопки хранятся в атрибутах
экземпляра класса. В дальнейшем из методов класса можно управлять этими объектами,
например, изменять текст надписи. Если объекты не сохранить, то получить к ним доступ
будет не так просто.
В предыдущем примере мы выравнивали надпись с помощью HTML-тегов. 
Однако выравнивание можно задать и вызовом метода setAlignment(), 
которому следует передать атрибут AlignHCenter из модуля QtCore:
self.label.setAlignment(QtCore.Qt.AlignHCenter)

В выражении, назначающем обработчик сигнала:
self.btnQuit.clicked.connect(QtWidgets.qApp.quit)
мы получаем доступ к объекту приложения через рассмотренный ранее атрибут qApp моду-
ля QtWidgets.
Создание объекта приложения и экземпляра класса MyWindow производится внутри условия: if __name__ == "__main__":

"""
