При использовании класса QWidget окно по умолчанию создается с заголовком, в котором расположены значок,
при нажатии на который выводится оконное меню, текст заголовка и кнопки Свернуть, Развернуть и Закрыть.
Указать другой тип создаваемого окна позволяет метод setWindowFlags() или параметр flags в конструкторе класса QWidget.
Обратите внимание, что метод setWindowFlags() должен вызываться перед отображением окна. Формат метода:

setWindowFlags(<Тип окна>)

В параметре <Тип окна> можно указать следующие атрибуты из класса QtCore.Qt:
Widget — тип по умолчанию для класса QWidget;

Window — указывает, что компонент является окном, независимо от того, имеет он родителя или нет.
Окно выводится с рамкой и заголовком, в котором расположены кнопки Свернуть, Развернуть и Закрыть.
По умолчанию размеры окна можно изменять с помощью мыши.

Dialog — диалоговое окно. Выводится с рамкой и заголовком, в котором расположены кнопки Справка и Закрыть.
Размеры окна можно изменять с помощью мыши. Это значение по умолчанию для класса QDialog.
Пример указания типа для диалогового окна:
window.setWindowFlags(QtCore.Qt.Dialog)

Sheet и Drawer — окна в стиле Apple Macintosh.

Popup — указывает, что окно представляет собой всплывающее меню. Оно выводится без рамки и заголовка и, кроме того,
может отбрасывать тень. Изменить размеры окна с помощью мыши нельзя.

Tool — сообщает, что окно представляет собой панель инструментов. Оно выводится
с рамкой и заголовком (меньшим по высоте, чем обычное окно), в котором расположена
кнопка Закрыть. Размеры окна можно изменять с помощью мыши.

ToolTip — указывает, что окно представляет собой всплывающую подсказку. Оно выводится без рамки и заголовка.
Изменить размеры окна с помощью мыши нельзя.

SplashScreen — сообщает, что окно представляет собой заставку. Оно выводится без
рамки и заголовка. Изменить размеры окна с помощью мыши нельзя. Это значение по
умолчанию для класса QSplashScreen.

Desktop — указывает, что окно представляет собой рабочий стол. Оно вообще не отображается на экране.

SubWindow — сообщает, что окно представляет собой дочерний компонент, независимо
от того, имеет он родителя или нет. Выводится оно с рамкой и заголовком (меньшим по
высоте, чем у обычного окна), но без кнопок. Изменить размеры окна с помощью мыши
нельзя.

ForeignWindow — указывает, что окно создано другим процессом.

CoverWindow — окно, представляющее минимизированное приложение на некоторых
мобильных платформах.

Получить тип окна в программе позволяет метод windowType().

Для окон верхнего уровня можно через оператор | дополнительно указать следующие атрибуты из класса QtCore.Qt.

MSWindowsFixedSizeDialogHint — запрещает изменение размеров окна. Кнопка Развернуть в заголовке окна становится неактивной.

FramelessWindowHint — убирает рамку и заголовок окна. Изменять размеры окна и перемещать его нельзя.

NoDropShadowWindowHint — убирает отбрасываемую окном тень.

CustomizeWindowHint — убирает рамку и заголовок окна, но добавляет эффект объемности. Размеры окна можно изменять.

WindowTitleHint — добавляет заголовок окна. Выведем для примера окно фиксированного размера с заголовком,
в котором находится только текст:
window.setWindowFlags(QtCore.Qt.Window | QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowTitleHint)

WindowSystemMenuHint — добавляет оконное меню и кнопку Закрыть.

WindowMinimizeButtonHint — добавляет в заголовок кнопку Свернуть.

WindowMaximizeButtonHint — добавляет в заголовок кнопку Развернуть.

WindowMinMaxButtonsHint — добавляет в заголовок кнопки Свернуть и Развернуть.

WindowCloseButtonHint — добавляет кнопку Закрыть.

WindowContextHelpButtonHint — добавляет кнопку Справка.

WindowStaysOnTopHint — сообщает системе, что окно всегда должно отображаться поверх всех других окон.

WindowStaysOnBottomHint — сообщает системе, что окно всегда должно быть расположено позади всех других окон.
Получить все установленные флаги из программы позволяет метод windowFlags().


Для изменения размеров окна предназначены следующие методы:
resize(<Ширина>, <Высота>) — изменяет текущий размер окна. Если содержимое окна не помещается в установленный размер,
то размер будет выбран так, чтобы компоненты поместились без искажения при условии, что используются менеджеры геометрии.
Следовательно, заданный размер может не соответствовать реальному размеру окна.
Если используется абсолютное позиционирование, компоненты могут оказаться наполовину или полностью за пределами
видимой части окна. В качестве параметра можно также указать экземпляр класса QSize из модуля QtCore:
    window.resize(100, 70)
    window.resize(QtCore.QSize(100, 70))

setGeometry(<X>, <Y>, <Ширина>, <Высота>) — изменяет одновременно положение компонента и его текущий размер.
Первые два параметра задают координаты левого верхнего угла (относительно родительского компонента),
а третий и четвертый параметры — ширину и высоту. В качестве параметра можно также указать экземпляр класса QRect из модуля QtCore:
    window.setGeometry(100, 100, 100, 70)
    window.setGeometry(QtCore.QRect(100, 100, 100, 70))

setFixedSize(<Ширина>, <Высота>) — задает фиксированный размер. Изменить размеры окна с помощью мыши нельзя.
Кнопка Развернуть в заголовке окна становится неактивной. В качестве параметра можно также указать экземпляр класса QSize:
    window.setFixedSize(100, 70)
    window.setFixedSize(QtCore.QSize(100, 70))

setFixedWidth(<Ширина>) — задает фиксированный размер только по ширине. Изменить ширину окна с помощью мыши нельзя;

setFixedHeight(<Высота>) — задает фиксированный размер только по высоте. Изменить высоту окна с помощью мыши нельзя;

setMinimumSize(<Ширина>, <Высота>) — задает минимальные размеры окна.
В качестве параметра можно также указать экземпляр класса QSize:
    window.setMinimumSize(100, 70)
    window.setMinimumSize(QtCore.QSize(100, 70))

setMinimumWidth(<Ширина>) и setMinimumHeight(<Высота>) — задают минимальную ширину и высоту соответственно;

setMaximumSize(<Ширина>, <Высота>) — задает максимальный размер окна.
В качестве параметра можно также указать экземпляр класса QSize:
    window.setMaximumSize(100, 70)
    window.setMaximumSize(QtCore.QSize(100, 70))

setMaximumWidth(<Ширина>) и setMaximumHeight(<Высота>) — задают максимальную ширину и высоту соответственно;

setBaseSize(<Ширина>, <Высота>) — задает базовые размеры. В качестве параметра можно также указать экземпляр класса QSize:
    window.setBaseSize(500, 500)
    window.setBaseSize(QtCore.QSize(500, 500))

adjustSize() — подгоняет размеры компонента под содержимое. При этом учитываются рекомендуемые размеры,
возвращаемые методом sizeHint().


Получить размеры позволяют следующие методы:
width() и height() — возвращают текущую ширину и высоту соответственно:
    window.resize(50, 70)
    print(window.width(), window.height()) # 50 70

size() — возвращает экземпляр класса QSize, содержащий текущие размеры:
    window.resize(50, 70)
    print(window.size().width(), window.size().height()) # 50 70

minimumSize() — возвращает экземпляр класса QSize, содержащий минимальные размеры;

minimumWidth() и minimumHeight() — возвращают минимальную ширину и высоту соответственно;

maximumSize() — возвращает экземпляр класса QSize, содержащий максимальные размеры;

maximumWidth() и maximumHeight() — возвращают максимальную ширину и высоту соответственно;

baseSize() — возвращает экземпляр класса QSize, содержащий базовые размеры;

sizeHint() — возвращает экземпляр класса QSize, содержащий рекомендуемые размеры компонента.
Если таковые являются отрицательными, считается, что нет рекомендуемого размера;

minimumSizeHint() — возвращает экземпляр класса QSize, содержащий рекомендуемый минимальный размер компонента.
Если возвращаемые размеры являются отрицательными, то считается, что нет рекомендуемого минимального размера;

rect() — возвращает экземпляр класса QRect, содержащий координаты и размеры прямоугольника, в который вписан компонент:
    window.setGeometry(QtCore.QRect(100, 100, 100, 70))
    rect = window.rect()
    print(rect.left(), rect.top()) # 0 0
    print(rect.width(), rect.height()) # 100 70

geometry() — возвращает экземпляр класса QRect, содержащий координаты относительно родительского компонента:
    window.setGeometry(QtCore.QRect(100, 100, 100, 70))
    rect = window.geometry()
    print(rect.left(), rect.top()) # 100 100
    print(rect.width(), rect.height()) # 100 70

При изменении и получении размеров окна следует учитывать, что:
    размеры не включают высоту заголовка окна и ширину границ;

    размер компонентов может изменяться в зависимости от настроек стиля. Например, на разных компьютерах может быть
        задан шрифт разного наименования и размера, поэтому от указания фиксированных размеров лучше отказаться

    размер окна может изменяться в промежутке между получением значения и действиями, выполняющими обработку этих
        значений в программе. Например, сразу после получения размера пользователь может изменить размеры окна с помощью мыши.


Чтобы получить размеры окна, включающие высоту заголовка и ширину границ, следует воспользоваться методом frameSize(),
который возвращает экземпляр класса QSize. Обратите внимание, что полные размеры окна доступны только после его отображения,
до этого момента они совпадают с размерами клиентской области окна, без учета высоты заголовка и ширины границ.
