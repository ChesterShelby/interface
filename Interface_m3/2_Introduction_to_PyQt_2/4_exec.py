"""
Для взаимодействия с системой и обработки возникающих сигналов предназначен основной цикл приложения.
После вызова метода exec_() программа переходит в бесконечный цикл. Инструкции, расположенные после вызова этого метода,
будут выполнены только после завершения работы всего приложения.
Цикл автоматически прерывается после закрытия последнего открытого окна приложения.
С помощью статического метода setQuitOnLastWindowClosed() класса QApplication это поведение можно изменить.

Чтобы завершить работу приложения, необходимо вызвать слот quit() или метод
exit([returnCode=0]) класса QApplication. Поскольку программа находится внутри цикла,
вызвать эти методы можно лишь при наступлении какого-либо события, например, при
нажатии пользователем кнопки.

После возникновения любого сигнала основной цикл прерывается, и управление передается в обработчик этого сигнала.
После завершения работы обработчика управление возвращается основному циклу приложения.

Если внутри обработчика выполняется длительная операция, программа перестает реагировать на события.
В качестве примера изобразим длительный процесс с помощью функции sleep() из модуля time
"""

import sys
import time

from PyQt5 import QtWidgets


def on_clicked():
    time.sleep(10)  # "Засыпаем" на 10 секунд


app = QtWidgets.QApplication(sys.argv)
button = QtWidgets.QPushButton("Запустить процесс")
button.resize(200, 40)
button.clicked.connect(on_clicked)
button.show()
sys.exit(app.exec_())


# Длительную операцию можно разбить на несколько этапов и по завершении каждого этапа
# выходить в основной цикл с помощью статического метода processEvents([flags=AllEvents])
# класса QCoreApplication, от которого наследуется класс QApplication.

